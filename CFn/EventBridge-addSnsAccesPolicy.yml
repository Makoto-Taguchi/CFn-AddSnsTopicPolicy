AWSTemplateFormatVersion: "2010-09-09"
Description: Create EnhancedScan EventBridge and CustomResource which add SNS AccessPolicy.
Metadata:
  ParameterGroups:
      - Label:
          default: Basic Information
        Parameters:
          - NamePrefix
          - LogRetentionInDays
      - Label:
          default: SNS Information
        Parameters:
          - SnsTopicArn
Parameters:
  NamePrefix:
    Type: String
  LogRetentionInDays:
    Type: Number
    Default: 30
  SnsTopicArn:
    Type: String

Resources:
  # 拡張スキャン（プッシュ時初回スキャン）の結果を通知するEventBridge
  InitialEnhancedScanNotification:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${NamePrefix}-ECREnhancedScan-Initial
      EventPattern:
        source:
          - aws.inspector2
        detail-type:
          - Inspector2 Scan
      State: ENABLED
      Targets:
        - Id: SNS
          Arn: !Ref SnsTopicArn
          InputTransformer:
            InputPathsMap:
              "time": "$.time"
              "account": "$.account"
              "region": "$.region"
              "repositoryname": "$.detail.repository-name"
              "imagetag": "$.detail.image-tags"
              "imagedigest": "$.detail.image-digest"
              "result-total": "$.detail.finding-severity-counts.TOTAL"
              "result-critical": "$.detail.finding-severity-counts.CRITICAL"
              "result-high": "$.detail.finding-severity-counts.HIGH"
              "result-medium": "$.detail.finding-severity-counts.MEDIUM"
            InputTemplate: |
              "ECRリポジトリに新規登録されたイメージへ、脆弱性スキャンが実行されました"
              "【スキャン対象イメージ】"
              "・スキャン実行日時（UTC）: <time>"
              "・AWSアカウントID: <account>"
              "・リージョン: <region>"
              "・ECRリポジトリ名: <repositoryname>"
              "・イメージタグ: <imagetag>"
              "・イメージダイジェスト: <imagedigest>"
              "【スキャン結果】"
              "・脆弱性全件数: <result-total>"
              "・深刻度[クリティカル]: <result-critical>"
              "・深刻度[高]: <result-high>"
              "・深刻度[中]: <result-medium>"
              ""
              "※ 詳細はInspectorV2のコンソール画面よりご確認ください"

  # SNSアクセスポリシーにEventBridgeからのパブリッシュ許可を追加する設定
  AddSnsTopicPolicyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${NamePrefix}-AddSnsTopicPolicy-Lambda-Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: !Sub ${NamePrefix}-AddSnsTopicPolicy-Lambda-Role-Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "sns:*"
                Resource:
                  - "*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  AddSnsTopicPolicyLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${NamePrefix}-AddSnsTopicPolicy-Function
      RetentionInDays: !Ref LogRetentionInDays

  AddSnsTopicPolicyLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: AddSnsTopicPolicyLambdaLogGroup
    Properties:
      MemorySize: 128
      Timeout: 60
      Runtime: python3.9
      FunctionName: !Sub ${NamePrefix}-AddSnsTopicPolicy-Function
      Role: !GetAtt AddSnsTopicPolicyLambdaRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          sns = boto3.client('sns')

          def lambda_handler(event, context):
            logger.info("event == {}".format(event))
            response = None

            topicArn = event['ResourceProperties']['TopicArn']
            awsAccountId = event['ResourceProperties']['AwsAccountId']

            addPolicy = {
              "Sid": "AWSEvent_Allow",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "sns:Publish",
              "Resource": topicArn,
              "Condition": {
                "StringEquals": {
                  "AWS:SourceAccount": awsAccountId
                }
              }
            }

            if event['RequestType'] == 'Create':
              # 既存のトピックポリシーを取得
              attributes = sns.get_topic_attributes(TopicArn = topicArn)
              policy = eval(attributes["Attributes"]["Policy"])
              logger.info("policy = {}".format(policy))

              # EventBridgeからのパブリッシュ許可を追記
              policy["Statement"].append(addPolicy)
              logger.info("updatepolicy = {}".format(policy))

              # トピックポリシーを上書き
              responce=sns.set_topic_attributes(
                TopicArn=topicArn,
                AttributeName='Policy',
                AttributeValue=json.dumps(policy)
              )

            if event['RequestType'] == 'Update':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

            if event['RequestType'] == 'Update':
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

            logger.info("response == {}".format(responce))
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responce)

  AddSnsTopicPolicyCustomResource:
    Type: Custom::AddSnsTopicPolicy
    Properties:
      ServiceToken: !GetAtt AddSnsTopicPolicyLambdaFunction.Arn
      TopicArn: !Ref SnsTopicArn
      AwsAccountId: !Ref AWS::AccountId